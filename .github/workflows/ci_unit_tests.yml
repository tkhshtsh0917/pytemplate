name: CI Unit Tests

on: push

jobs:
  ci-unit-tests:
    name: Unit Testing On ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'deploy:')"
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'

    - name: Get Python Version
      id: get-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap Poetry
      shell: bash
      run: |
        python -m ensurepip
        python -m pip install --upgrade pip
        python -m pip install poetry

    - name: Setup Cache Poetry Dependencies
      uses: actions/cache@v1
      id: cache
      with:
        path: ~/.virtualenvs
        key: poetry-${{ runner.os }}-${{ steps.get-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-${{ steps.get-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Configure poetry
      shell: bash
      run: |
        python -m poetry config virtualenvs.in-project false
        python -m poetry config virtualenvs.path ~/.virtualenvs

    - name: Install Poetry Dependencies
      shell: bash
      run: python -m poetry install --no-interaction
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Lint Check
      shell: bash
      run: |
        python -m poetry run isort . --diff
        python -m poetry run black . --check --diff

    - name: Run Unit Tests
      shell: bash
      run: python -m poetry run pytest tests -v --cov=./pytemplate/functions_for_pytest_sample --cov-branch
