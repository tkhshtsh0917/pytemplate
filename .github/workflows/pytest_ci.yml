name: Pytest-CI

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - '**'

  pull_request:
    paths-ignore:
      - 'docs/**'
    branches:
      - '**'

jobs:
  ci-tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'

    - name: Get Python Version
      id: get-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap Poetry
      shell: bash
      run: |
        python -m ensurepip
        python -m pip install --upgrade pip
        python -m pip install poetry

    - name: Configure poetry
      shell: bash
      run: python -m poetry config virtualenvs.in-project true

    - name: Setup Cache Poetry Dependencies
      uses: actions/cache@v2
      id: cach
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.get-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure Cache Is Healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: timeout 10s python -m poetry run pip --version || rm -rf .venv

    - name: Install Poetry Dependencies
      shell: bash
      run: python -m poetry install --no-interaction

    - name: Lint Check
      shell: bash
      run: |
        python -m poetry run isort . --diff
        python -m poetry run black . --check --diff

    - name: Run Tests
      shell: bash
      run: python -m poetry run pytest tests -v --cov=./pytemplate/functions_for_pytest_sample --cov-branch --cov-report=xml

    - name: Upload Test Coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true
