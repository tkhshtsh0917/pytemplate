name: Generate-Documents

on:
  push:
    branches:
    - 'main'

jobs:
  gen-docs:
    name: generate documents
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[Auto Deploy] Generate documents.')"
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        ref: 'main'

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: 'x64'

    - name: Get Python Version
      id: get-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap Poetry
      shell: bash
      run: |
        python -m ensurepip
        python -m pip install --upgrade pip
        python -m pip install poetry

    - name: Configure poetry
      shell: bash
      run: python -m poetry config virtualenvs.in-project true

    - name: Setup Cache Poetry Dependencies
      uses: actions/cache@v2
      id: cach
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.get-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure Cache Is Healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: timeout 10s python -m poetry run pip --version || rm -rf .venv

    - name: Install Poetry Dependencies
      shell: bash
      run: python -m poetry install --no-interaction

    - name: Build Documents
      shell: bash
      run: |
        python -m poetry run sphinx-apidoc -f -o ./docs/generate .
        python -m poetry run sphinx-build -b singlehtml ./docs/generate ./docs

    - name: Deploy Configuration
      run: |
        mkdir ~/.ssh
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
        echo "${{ secrets.DOCUMENTS_DEPLOY_KEY }}" > ~/.ssh/id_rsa
        chmod 400 ~/.ssh/id_rsa

    - name: Push
      env:
        GITHUB_USER: "auto_deploy_user"
        GITHUB_EMAIL: "auto_deploy@email.com"
      run: |
          git config --local user.name "${GITHUB_USER}"
          git config --local user.email "${GITHUB_EMAIL}"
          git remote set-url origin git@github.com:${GITHUB_REPOSITORY}.git
          git add docs
          git commit -m "[Auto Deploy] Generate documents."
          git push origin main
